$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

使用命令git add <file>，注意，可反复多次使用，添加多个文件；
使用命令git commit -m <message>，完成。

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
——————————————————————————————版本跳转——————————————————————————————————
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
————————————————————————————放弃修改——————————————————————————————————————
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

git rm用于删除一个文件。

git checkout -- <filename>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
————————————————————————————————远程库 github————————————————————————————————————
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
例如: $ git remote add origin git@github.com:michaelliao/learngit.git

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
—————————————————————————创建合并分支——————————————————————————————
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>
————————————————————————合并分支冲突解决——————————————————————————————
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph命令可以看到分支合并图。

合并分支时，加上--no-ff参数就可以用普通模式合并
————————————————————————分支策略——————————————————————————————————————
分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并。
————————————————————bug 修复（临时保存工作区）——————————————————————————————

用来临时保存工作区的命令(在某一分支下)：
$ git stash

查看stash表：
$ git stash list

恢复时有两种方法：
①
使用恢复命令：
$ git stash apply
恢复后stash内容并不删除，需要用
$ git stash drop
来删除
②
使用以下命令：
$ git stash pop
直接恢复最新的那个临时工作区

你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}
——————————————————————Feature分支（新功能开发）————————————————————————————
现在，接到了一个新任务：开发代号为Vulcan的新功能，于是准备开发：
$ git checkout -b feature-vulcan

结果在提交后，老板突然说，经费不足，新功能取消。
这时候返回master或dev分支

$ git branch -D feature-vulcan
强制删除分支
——————————————————————多人协作——————————————————————————————————————————————
查看远程库的信息：
$ git remote
origin

或者，要显示更详细的信息：
$ git remote -v
origin  https://github.com/LittleFive555/learngit.git (fetch)
origin  https://github.com/LittleFive555/learngit.git (push)
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址

推送分支：
$ git push origin master
$ git push origin dev

但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支	是主分支，因此要时刻与远程同步；
dev分支		是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支		只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支	是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

抓取分支：
	格式 git clone git@github.com:用户名/仓库名.git
	或者 git clone https://github.com/用户名/仓库名.git
$ git clone git@github.com:LittleFive555/learngit.git

当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。
不信可以用git branch命令看看：
$ git branch
* master

现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
$ git checkout -b dev origin/dev

https://www.liaoxuefeng.com/wiki/896043488029600/900375748016320
#######################远程协作其余内容  ↑  以后用到再看###################

————————————————————————标签管理——————————————————————————————
首先切换到需要打标签的分支上：
$ git branch
$ git checkout master

然后：
$ git tag v1.0
就打上了标签

查看所有标签：
$ git tag

默认标签是打在最新提交的commit上的。
有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
方法是找到历史提交的commit id，然后打上就可以了：
$ git log --pretty=oneline --abbrev-commit
$ git tag v0.9 f52c633

注意，标签不是按时间顺序列出，而是按字母排序的。
可以用git show <tagname>查看标签信息：
$ git show v0.9

还可以创建带有说明的标签，用 -a 指定标签名， -m 指定说明文字：
$ git tag -a v0.1 -m "version 0.1 released" 1094adb

注意：标签总是和某个commit挂钩。
如果这个commit既出现在master分支，又出现在dev分支，
那么在这两个分支上都可以看到这个标签。
——————————————————————————操作标签————————————————————————————————————————
如果标签打错了，也可以删除：
$ git tag -d v0.1

如果要推送某个标签到远程：
$ git push origin v1.0
或者一次性推送全部尚未推送到远程的本地标签：
$ git push origin --tags

如果标签已经推送到远程，要删除远程标签就麻烦一点
先从本地删除：
$ git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9

————————————————————————使用github————————————————————————————————————
如何参与一个开源项目呢？
比如人气极高的bootstrap项目，这是一个非常强大的CSS框架
你可以访问它的项目主页https://github.com/twbs/bootstrap
点“Fork”就在自己的账号下克隆了一个bootstrap仓库
然后，从自己的账号下clone：
$ git clone git@github.com:LittleFive555/learngit.git


如果你希望bootstrap的官方库能接受你的修改，
你就可以在GitHub上发起一个pull request。
当然，对方是否接受你的pull request就不一定了。
————————————————————————————使用码云——————————————————————————————————————————————————————
可以使用国内的Git托管服务——码云（gitee.com）
和GitHub相比，码云也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。
对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。
——————————————————————————————忽略特殊文件————————————————————————————————————————
忽略文件的原则是：
1.忽略操作系统自动生成的文件，比如缩略图等；
2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
————————————————————————配置别名————————————————————————————————————
我们只需要敲一行命令，告诉Git，以后st就表示status：
$ git config --global alias.st status
配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

别名命令
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git config --global alias.last 'log -1'
————————————————————————搭建Git服务器——————————————————————————————————
用到的时候再看此网页：
https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664